// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserEmailVerificationToken {
  id         String   @id @default(uuid())
  email      String   @unique
  otp        Int
  verified   Boolean  @default(false)
  created_at DateTime @default(now())
  expiredAt  DateTime
}

model User {
  id               String              @id @default(uuid())
  username         String              @unique
  email            String?             @unique
  password         String
  profile_photo    String?
  cover_photo      String?
  role             String?             @default("User")
  notifications    Notifications[]
  enrolled_courses CourseEnrollement[]
  course_review    CourseReview[]
  level            Int                 @default(0)
  chatsMessages    ChatMessage[]
  channels         Channel[]
  created_at       DateTime            @default(now())
  updated_at       DateTime            @updatedAt
}

model CourseEnrollement {
  id                Int      @id @default(autoincrement())
  course            Course   @relation(fields: [course_id], references: [id])
  course_id         String
  enrolled_user     User     @relation(fields: [enrolled_user_id], references: [id])
  enrolled_user_id  String
  completed         Boolean  @default(false)
  completed_modules Int      @default(0)
  enrolled_at       DateTime @default(now())
  completed_at      DateTime @updatedAt

  @@unique([course_id, enrolled_user_id])
}

model Notifications {
  id         String   @id @default(uuid())
  message    String
  user       User     @relation(fields: [user_id], references: [id])
  user_id    String
  created_at DateTime @default(now())
}

model Course {
  id                  String              @id @default(uuid())
  title               String
  about               String
  profile_photo       String
  cover_photo         String
  instructor          String
  category            CourseCategory      @relation(fields: [category_id], references: [id])
  category_id         String
  rating              Int
  module              CourseModule[]
  enrollement         CourseEnrollement[]
  required_user_level Int
  reviews             CourseReview[]
  created_at          DateTime            @default(now())
  updated_at          DateTime            @updatedAt
}

model CourseReview {
  id             String   @id @default(uuid())
  course         Course   @relation(fields: [course_id], references: [id])
  course_id      String
  rating         Int
  reviewed_by    User     @relation(fields: [review_user_Id], references: [id])
  review_user_Id String
  text           String
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
}

model CourseModule {
  id            String   @id @default(uuid())
  name          String
  title         String
  content       String
  course        Course   @relation(fields: [course_id], references: [id])
  course_id     String
  video_url     String
  cover_photo   String
  profile_photo String
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
}

model CourseCategory {
  id          String   @id @default(uuid())
  name        String
  courses     Course[]
  description String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model ChatMessage {
  id         String   @id @default(uuid())
  sender     User     @relation(fields: [sender_id], references: [id])
  sender_id  String
  message    String
  channel    Channel  @relation(fields: [channel_id], references: [id])
  channel_id String
  created_at DateTime @default(now())
}

model Channel {
  id                  String        @id @default(uuid())
  name                String        @unique
  profile_photo       String?
  description         String
  admin_id            String
  chatsMessages       ChatMessage[]
  members             User[]
  required_user_level Int
  created_at          DateTime      @default(now())
}
